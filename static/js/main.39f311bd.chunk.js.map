{"version":3,"sources":["App.js","serviceWorker.js","index.js","mix2.jpg"],"names":["require","config","firebaseApp","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","DBRef","database","ref","CRef","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleIncrementChange","event","setState","increment","target","value","handleCurrentChange","set","current","state","_this2","on","snapshot","val","_this3","classes","_this$state","react_default","a","createElement","className","src","phone","alt","barDiv","LinearProgress_default","bar","variant","textDiv","TextField_default","id","label","type","margin","onChange","Button_default","onClick","Component","withStyles","width","marginRight","marginTop","display","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mTASAA,EAAQ,KAAUC,SAElB,IAYMC,EAVWF,EAAQ,KAUIG,cATd,CACbC,OAAQC,0CACRC,WAAYD,qCACZE,YAAaF,4CACbG,UAAWH,qBACXI,cAAeJ,iCACfK,kBAAmBL,iBAIfM,EAAQT,EAAYU,WAAWC,MAC/BC,EAAOZ,EAAYU,WAAWC,IAAI,WAqBlCE,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeRQ,sBAAwB,kBAAM,SAAAC,GAC5BR,EAAKS,SAAS,CAACC,UAAWF,EAAMG,OAAOC,UAjBtBZ,EAoBnBa,oBAAsB,WACpBnB,EAAMoB,IAAI,CAACC,QAA2B,EAAnBf,EAAKgB,MAAMD,QAA+B,EAArBf,EAAKgB,MAAMN,YACnDV,EAAKS,SAAS,CAACC,UAAU,MApBL3B,EAAQ,KAFX,OAGjBiB,EAAKgB,MAAQ,CACXD,QAAS,EACTL,UAAW,IALIV,mFASC,IAAAiB,EAAAd,KAClBN,EAAKqB,GAAG,QAAS,SAAAC,GACfF,EAAKR,SAAS,CAACM,QAASI,EAASC,2CAgB5B,IAAAC,EAAAlB,KAEAmB,EAAWnB,KAAKJ,MAAhBuB,QAFAC,EAGsBpB,KAAKa,MAA3BD,EAHAQ,EAGAR,QAASL,EAHTa,EAGSb,UAChB,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAOF,UAAU,WAAWG,IAAI,SAC1CN,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQS,QACtBP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAgBE,UAAWL,EAAQW,IAAKC,QAAQ,cAAetB,MAAO,IAAIG,EAxExE,MAuEJ,IAEIA,EAFJ,KAvEI,KA4EJS,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQa,SAEtBX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEb,MAAOF,EACP2B,GAAG,kBACHC,MAAM,eACNC,KAAK,SACLC,OAAO,SACPC,SAAWtC,KAAKI,0BAGlBiB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAQkB,QAAS,kBAAMtB,EAAKR,wBAA5B,wBApDM+B,aA6DHC,uBAhFA,CACbZ,IAAK,CACHa,MAAO,IACPC,YAAY,GACZP,OAAO,QAETT,OAAQ,CACNiB,UAAU,IACVC,QAAQ,OACRC,cAAc,OAEhBf,QAAS,CACPa,UAAU,GACVC,QAAQ,OACRC,cAAc,QAkEHL,CAAmB/C,GC/FdqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.39f311bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport phone from \"./mix2.jpg\";\nimport './App.css';\n\nimport Button from \"@material-ui/core/Button\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core\";\n\nrequire('dotenv').config();\n\nconst price = 370;\n\nconst firebase = require('firebase');\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\n\nconst firebaseApp = firebase.initializeApp(config);\nconst DBRef = firebaseApp.database().ref();\nconst CRef = firebaseApp.database().ref(\"current\");\n\nconst styles = {\n  bar: {\n    width: 200,\n    marginRight:50,\n    margin:\"auto\"\n  },\n  barDiv: {\n    marginTop:100,\n    display:\"flex\",\n    flexDirection:\"row\"\n  },\n  textDiv: {\n    marginTop:50,\n    display:\"flex\",\n    flexDirection:\"row\"\n  },\n\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const currentJson = require(\"./current.json\");\n    this.state = {\n      current: 0,\n      increment: '',\n    };\n  }\n\n  componentDidMount() {\n    CRef.on('value', snapshot => {\n      this.setState({current: snapshot.val()});\n    });\n\n  }\n\n  handleIncrementChange = () => event => {\n    this.setState({increment: event.target.value});\n  }\n\n  handleCurrentChange = () => {\n    DBRef.set({current:this.state.current*1+this.state.increment*1});\n    this.setState({increment:''});\n  }\n\n  \n\n  render() {\n    \n    const {classes} = this.props;\n    const {current, increment} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={phone} className=\"App-logo\" alt=\"logo\" />\n          <div className={classes.barDiv}>\n            <LinearProgress className={classes.bar} variant=\"determinate\"  value={100*current/price} />\n            ${current}/${price}\n          </div>\n\n          <div className={classes.textDiv}>\n\n            <TextField\n              value={increment}\n              id=\"standard-number\"\n              label=\"Enter amount\"\n              type=\"number\"\n              margin=\"normal\"\n              onChange= {this.handleIncrementChange()}\n            />\n\n            <Button onClick={() => this.handleCurrentChange()}>Add amount</Button>\n          </div>\n          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mix2.e1236d23.jpg\";"],"sourceRoot":""}